// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: demo.proto

package demopb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DemoData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DemoData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DemoData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DemoDataMultiError, or nil
// if none found.
func (m *DemoData) ValidateAll() error {
	return m.validate(true)
}

func (m *DemoData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := DemoDataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return DemoDataMultiError(errors)
	}

	return nil
}

// DemoDataMultiError is an error wrapping multiple validation errors returned
// by DemoData.ValidateAll() if the designated constraints aren't met.
type DemoDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DemoDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DemoDataMultiError) AllErrors() []error { return m }

// DemoDataValidationError is the validation error returned by
// DemoData.Validate if the designated constraints aren't met.
type DemoDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DemoDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DemoDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DemoDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DemoDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DemoDataValidationError) ErrorName() string { return "DemoDataValidationError" }

// Error satisfies the builtin error interface
func (e DemoDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDemoData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DemoDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DemoDataValidationError{}

// Validate checks the field values on Result with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Result with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ResultMultiError, or nil if none found.
func (m *Result) ValidateAll() error {
	return m.validate(true)
}

func (m *Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ResultMultiError(errors)
	}

	return nil
}

// ResultMultiError is an error wrapping multiple validation errors returned by
// Result.ValidateAll() if the designated constraints aren't met.
type ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResultMultiError) AllErrors() []error { return m }

// ResultValidationError is the validation error returned by Result.Validate if
// the designated constraints aren't met.
type ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResultValidationError) ErrorName() string { return "ResultValidationError" }

// Error satisfies the builtin error interface
func (e ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResultValidationError{}

// Validate checks the field values on AddResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddRespMultiError, or nil if none found.
func (m *AddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddRespValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddRespValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRespValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return AddRespMultiError(errors)
	}

	return nil
}

// AddRespMultiError is an error wrapping multiple validation errors returned
// by AddResp.ValidateAll() if the designated constraints aren't met.
type AddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRespMultiError) AllErrors() []error { return m }

// AddRespValidationError is the validation error returned by AddResp.Validate
// if the designated constraints aren't met.
type AddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRespValidationError) ErrorName() string { return "AddRespValidationError" }

// Error satisfies the builtin error interface
func (e AddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRespValidationError{}

// Validate checks the field values on DeleteReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteReqMultiError, or nil
// if none found.
func (m *DeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteReqMultiError(errors)
	}

	return nil
}

// DeleteReqMultiError is an error wrapping multiple validation errors returned
// by DeleteReq.ValidateAll() if the designated constraints aren't met.
type DeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReqMultiError) AllErrors() []error { return m }

// DeleteReqValidationError is the validation error returned by
// DeleteReq.Validate if the designated constraints aren't met.
type DeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReqValidationError) ErrorName() string { return "DeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReqValidationError{}

// Validate checks the field values on DeleteResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRespMultiError, or
// nil if none found.
func (m *DeleteResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRespValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRespValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRespValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRespMultiError(errors)
	}

	return nil
}

// DeleteRespMultiError is an error wrapping multiple validation errors
// returned by DeleteResp.ValidateAll() if the designated constraints aren't met.
type DeleteRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRespMultiError) AllErrors() []error { return m }

// DeleteRespValidationError is the validation error returned by
// DeleteResp.Validate if the designated constraints aren't met.
type DeleteRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRespValidationError) ErrorName() string { return "DeleteRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRespValidationError{}

// Validate checks the field values on UpdateResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRespMultiError, or
// nil if none found.
func (m *UpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRespValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRespValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRespValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRespMultiError(errors)
	}

	return nil
}

// UpdateRespMultiError is an error wrapping multiple validation errors
// returned by UpdateResp.ValidateAll() if the designated constraints aren't met.
type UpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRespMultiError) AllErrors() []error { return m }

// UpdateRespValidationError is the validation error returned by
// UpdateResp.Validate if the designated constraints aren't met.
type UpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRespValidationError) ErrorName() string { return "UpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRespValidationError{}

// Validate checks the field values on GetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetReqMultiError, or nil if none found.
func (m *GetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetReqMultiError(errors)
	}

	return nil
}

// GetReqMultiError is an error wrapping multiple validation errors returned by
// GetReq.ValidateAll() if the designated constraints aren't met.
type GetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReqMultiError) AllErrors() []error { return m }

// GetReqValidationError is the validation error returned by GetReq.Validate if
// the designated constraints aren't met.
type GetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReqValidationError) ErrorName() string { return "GetReqValidationError" }

// Error satisfies the builtin error interface
func (e GetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReqValidationError{}

// Validate checks the field values on GetResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetRespMultiError, or nil if none found.
func (m *GetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRespValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRespValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRespValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRespMultiError(errors)
	}

	return nil
}

// GetRespMultiError is an error wrapping multiple validation errors returned
// by GetResp.ValidateAll() if the designated constraints aren't met.
type GetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRespMultiError) AllErrors() []error { return m }

// GetRespValidationError is the validation error returned by GetResp.Validate
// if the designated constraints aren't met.
type GetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRespValidationError) ErrorName() string { return "GetRespValidationError" }

// Error satisfies the builtin error interface
func (e GetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRespValidationError{}
